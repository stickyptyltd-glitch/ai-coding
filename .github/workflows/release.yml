name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish Draft Release (Release Drafter)
        uses: release-drafter/release-drafter@v6
        with:
          publish: true
          name: ${{ github.ref_name }}
          tag: ${{ github.ref_name }}
          version: ${{ github.ref_name }}
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  go-binaries:
    runs-on: ubuntu-latest
    needs: publish-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - name: Build Go binaries
        working-directory: go
        run: |
          set -e
          mkdir -p ../dist
          builds=(
            "linux amd64"
            "linux arm64"
            "darwin amd64"
            "darwin arm64"
            "windows amd64"
          )
          for b in "${builds[@]}"; do
            read -r GOOS GOARCH <<< "$b"
            BIN=agentctl
            OUT=agentctl-${GOOS}-${GOARCH}
            EXT=""
            if [ "$GOOS" = "windows" ]; then EXT=.exe; fi
            echo "Building $OUT$EXT"
            env CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -o ../dist/${OUT}${EXT} ./cmd/agentctl
            # archive
            if [ "$GOOS" = "windows" ]; then
              (cd ../dist && zip -q ${OUT}.zip ${OUT}${EXT} && rm -f ${OUT}${EXT})
            else
              (cd ../dist && tar czf ${OUT}.tar.gz ${OUT}${EXT} && rm -f ${OUT}${EXT})
            fi
          done
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
