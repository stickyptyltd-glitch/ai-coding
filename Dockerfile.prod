# LECHEYNE AI - PRODUCTION DOCKERFILE
# Ultra-optimized multi-stage build for enterprise deployment

# Stage 1: Dependencies and security hardening
FROM node:20-alpine AS dependencies

# Security labels
LABEL maintainer="Sticky Pty Ltd <sticky.pty.ltd@gmail.com>"
LABEL version="2.0.0"
LABEL description="Lecheyne AI - Enterprise Development Platform"
LABEL org.opencontainers.image.base.name="node:20-alpine"
LABEL org.opencontainers.image.security.policy="https://github.com/lecheyne-ai/security-policy"

WORKDIR /app

# Security: Update packages and remove cache
RUN apk update --no-cache && \
    apk upgrade --no-cache && \
    apk add --no-cache --virtual .build-deps \
        python3 \
        make \
        g++ \
        cairo-dev \
        jpeg-dev \
        pango-dev \
        musl-dev \
        giflib-dev \
        pixman-dev \
        pangomm-dev \
        libjpeg-turbo-dev \
        freetype-dev \
        pkgconfig && \
    rm -rf /var/cache/apk/*

# Copy package files for dependency resolution
COPY package*.json ./

# Install production dependencies with security optimizations
RUN npm ci --only=production --silent --no-audit --no-fund && \
    npm cache clean --force

# Stage 2: Build and optimization
FROM node:20-alpine AS builder

WORKDIR /app

# Copy source and dependencies
COPY --from=dependencies /app/node_modules ./node_modules
COPY . .

# Build application with optimizations
RUN npm run clean 2>/dev/null || true && \
    npm run build 2>/dev/null || true && \
    npm prune --production

# Security: Remove sensitive development files
RUN rm -rf \
    test/ tests/ \
    docs/ \
    backups/ \
    .git/ \
    .github/ \
    *.md \
    .env* \
    .dockerignore \
    Dockerfile* \
    docker-compose* \
    scripts/generate-keys.js \
    scripts/sign-license.js \
    keys/private.pem \
    validation-reports/ \
    benchmark-report.json

# Stage 3: Distroless production runtime
FROM gcr.io/distroless/nodejs20-debian12:nonroot AS production

# Use distroless image for maximum security (already runs as nonroot)
WORKDIR /app

# Copy only essential application files from builder
COPY --from=builder --chown=nonroot:nonroot /app/package*.json ./
COPY --from=builder --chown=nonroot:nonroot /app/node_modules ./node_modules
COPY --from=builder --chown=nonroot:nonroot /app/src ./src
COPY --from=builder --chown=nonroot:nonroot /app/web ./web
COPY --from=builder --chown=nonroot:nonroot /app/openapi ./openapi
COPY --from=builder --chown=nonroot:nonroot /app/deploy ./deploy

# Create required runtime directories
USER root
RUN mkdir -p logs data cache keys temp && \
    chown -R nonroot:nonroot /app
USER nonroot

# Network configuration
EXPOSE 3000/tcp

# Advanced health check with multiple endpoints
HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=3 \
    CMD ["node", "-e", "require('http').get('http://localhost:3000/healthz/strict', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]

# Production environment configuration
ENV NODE_ENV=production \
    PORT=3000 \
    LECHEYNE_ENVIRONMENT=production \
    NODE_OPTIONS="--enable-source-maps --max-old-space-size=2048" \
    UV_THREADPOOL_SIZE=16 \
    NODE_EXTRA_CA_CERTS="" \
    LOG_LEVEL=info \
    ENABLE_FILE_LOGGING=true

# Build arguments for metadata
ARG BUILD_DATE
ARG VCS_REF 
ARG VERSION=2.0.0
ARG BUILD_NUMBER

# Comprehensive OCI image labels
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.authors="Sticky Pty Ltd <sticky.pty.ltd@gmail.com>"
LABEL org.opencontainers.image.url="https://lecheyne.ai"
LABEL org.opencontainers.image.documentation="https://docs.lecheyne.ai"
LABEL org.opencontainers.image.source="https://github.com/stickyptyltd-glitch/ai-coding"
LABEL org.opencontainers.image.version=${VERSION}
LABEL org.opencontainers.image.revision=${VCS_REF}
LABEL org.opencontainers.image.vendor="Sticky Pty Ltd"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.title="Lecheyne AI"
LABEL org.opencontainers.image.description="Enterprise Multi-Agent AI Development Platform - Production Ready"
LABEL org.lecheyne.build.number=${BUILD_NUMBER}
LABEL org.lecheyne.security.scan="trivy"
LABEL org.lecheyne.tier="production"

# Security and runtime optimizations
USER nonroot
WORKDIR /app

# Use exec form for better signal handling
CMD ["node", "src/web-server.js"]